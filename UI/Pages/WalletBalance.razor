@page "/walletbalance/{walletId:guid}"
@attribute [Authorize]
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using UI.DTOs
@inject HttpClient Http

<style>
    /* Increase specificity of the selector */
    table.table td.cell-red {
        background-color: red;
    }

    table.table td.cell-green {
        background-color: green;
    }

    table.table td.amount {
        text-align: right;
    }
</style>

<PageTitle>Wallet Balances</PageTitle>

@if (Balances == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Wallet @Wallet.Name Balances</h1>

    <h3>Totals: @(FormatBalanceValue(Wallet.Balance)) VNĐ</h3>
    <table class="table">
        <colgroup>
            <col span="1" style="width: 10%;">
            <col span="1" style="width: 25%;">
            <col span="1" style="width: 50%;">
            <col span="1" style="width: 15%;">
        </colgroup>

        <thead>
            <tr>
                <th></th>
                <th>Amount</th>
                <th>Reason</th>
                <th>Date</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in Balances)
            {
                <tr>
                    <td>@(b.ChangeType?"+" :"-")</td>
                    <td class="right-align">@(FormatBalanceValue(b.Amount)) VNĐ</td>
                    <td>@b.Reason</td>
                    <td>@b.Date.ToLocalTime().ToShortDateString()</td>
                    <td><button onclick="@(()=>DeleteBalance(b.Id))">X</button>  <button onclick="@(()=>EditBalance(b.Id))">+</button></td>
                </tr>
            }
            <tr>
                <td class="@GetCellColor(newBalance.ChangeType)" @onclick="() => ToggleChangeType()">
                    <input type="checkbox" @bind="@newBalance.ChangeType"  />
                </td>
                <td><input type="number" @bind="@newBalance.Amount" /></td>
                <td><input type="text" style="width: 100%; height: 100%;" @bind="@newBalance.Reason" /></td>
                <td><input type="date" @bind="@newBalance.Date" /></td>
            </tr>
            <tr>
                <td><button @onclick="@HandleValidSubmit">Submit</button></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid walletId { get; set; }

    private WalletResponseDto Wallet;
    private BalanceChangeModel[] Balances;
    private BalanceChangeModel newBalance = new();
    private static System.Globalization.NumberFormatInfo numberFormat = new System.Globalization.NumberFormatInfo
    {
        NumberGroupSeparator = ",", // Customize the thousands separator
    };

    protected override async Task OnInitializedAsync()
    {
        Wallet = (await Http.GetFromJsonAsync<WalletResponseDto>($"api/wallet/{walletId}"));
        Console.WriteLine(Wallet.Balance);
        Balances = (await Http.GetFromJsonAsync<BalanceChangeModel[]>($"api/wallet/{walletId}/balance")).ToArray();
        newBalance.Date = DateTime.Now;
    }

    private async void HandleValidSubmit()
    {
        Console.WriteLine(newBalance.Amount);
        await Http.PostAsJsonAsync<BalanceChangeModel>($"api/wallet/{walletId}/balance", newBalance);
        Wallet = (await Http.GetFromJsonAsync<WalletResponseDto>($"api/wallet/{walletId}"));
        Balances = (await Http.GetFromJsonAsync<BalanceChangeModel[]>($"api/wallet/{walletId}/balance")).ToArray();
        StateHasChanged();
    }

    private async void EditBalance(Guid id)
    {
        newBalance = (await Http.GetFromJsonAsync<BalanceChangeModel>($"api/balance/{id}"));
        StateHasChanged();
    }

    private async void DeleteBalance(Guid id)
    {
        await Http.DeleteAsync($"api/balance/{id}");
        Wallet = (await Http.GetFromJsonAsync<WalletResponseDto>($"api/wallet/{walletId}"));
        Balances = (await Http.GetFromJsonAsync<BalanceChangeModel[]>($"api/wallet/{walletId}/balance")).ToArray();
        StateHasChanged();
    }

    private string GetCellColor(bool changeType) {
        if (changeType)
        {
            return "cell-green";
        }
        else
        {
            return "cell-red";
        }
    }

    private void ToggleChangeType()
    {
        newBalance.ChangeType = !newBalance.ChangeType;
    }

    private string FormatBalanceValue(double bal)
    {
        return bal.ToString("N0", numberFormat);
    }
}
